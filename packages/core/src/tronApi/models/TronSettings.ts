/* tslint:disable */
/* eslint-disable */
/**
 * gasless TRON service REST api
 * Service to publish TRON transactions
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TronToken } from './TronToken';
import {
    TronTokenFromJSON,
    TronTokenFromJSONTyped,
    TronTokenToJSON,
} from './TronToken';

/**
 * 
 * @export
 * @interface TronSettings
 */
export interface TronSettings {
    /**
     * 
     * @type {string}
     * @memberof TronSettings
     */
    walletImplementation: string;
    /**
     * 
     * @type {string}
     * @memberof TronSettings
     */
    chainId: string;
    /**
     * 
     * @type {Array<TronToken>}
     * @memberof TronSettings
     */
    tokens: Array<TronToken>;
}

/**
 * Check if a given object implements the TronSettings interface.
 */
export function instanceOfTronSettings(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "walletImplementation" in value;
    isInstance = isInstance && "chainId" in value;
    isInstance = isInstance && "tokens" in value;

    return isInstance;
}

export function TronSettingsFromJSON(json: any): TronSettings {
    return TronSettingsFromJSONTyped(json, false);
}

export function TronSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TronSettings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'walletImplementation': json['walletImplementation'],
        'chainId': json['chainId'],
        'tokens': ((json['tokens'] as Array<any>).map(TronTokenFromJSON)),
    };
}

export function TronSettingsToJSON(value?: TronSettings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'walletImplementation': value.walletImplementation,
        'chainId': value.chainId,
        'tokens': ((value.tokens as Array<any>).map(TronTokenToJSON)),
    };
}

