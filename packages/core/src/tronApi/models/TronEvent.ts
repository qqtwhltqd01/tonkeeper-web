/* tslint:disable */
/* eslint-disable */
/**
 * gasless TRON service REST api
 * Service to publish TRON transactions
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TronAction } from './TronAction';
import {
    TronActionFromJSON,
    TronActionFromJSONTyped,
    TronActionToJSON,
} from './TronAction';
import type { TronFee } from './TronFee';
import {
    TronFeeFromJSON,
    TronFeeFromJSONTyped,
    TronFeeToJSON,
} from './TronFee';

/**
 * 
 * @export
 * @interface TronEvent
 */
export interface TronEvent {
    /**
     * 
     * @type {string}
     * @memberof TronEvent
     */
    txHash: string;
    /**
     * 
     * @type {number}
     * @memberof TronEvent
     */
    timestamp: number;
    /**
     * 
     * @type {Array<TronAction>}
     * @memberof TronEvent
     */
    actions: Array<TronAction>;
    /**
     * 
     * @type {TronFee}
     * @memberof TronEvent
     */
    fees?: TronFee;
    /**
     * Event is not finished yet. Transactions still happening
     * @type {boolean}
     * @memberof TronEvent
     */
    inProgress: boolean;
}

/**
 * Check if a given object implements the TronEvent interface.
 */
export function instanceOfTronEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "txHash" in value;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "actions" in value;
    isInstance = isInstance && "inProgress" in value;

    return isInstance;
}

export function TronEventFromJSON(json: any): TronEvent {
    return TronEventFromJSONTyped(json, false);
}

export function TronEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): TronEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'txHash': json['txHash'],
        'timestamp': json['timestamp'],
        'actions': ((json['actions'] as Array<any>).map(TronActionFromJSON)),
        'fees': !exists(json, 'fees') ? undefined : TronFeeFromJSON(json['fees']),
        'inProgress': json['inProgress'],
    };
}

export function TronEventToJSON(value?: TronEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'txHash': value.txHash,
        'timestamp': value.timestamp,
        'actions': ((value.actions as Array<any>).map(TronActionToJSON)),
        'fees': TronFeeToJSON(value.fees),
        'inProgress': value.inProgress,
    };
}

