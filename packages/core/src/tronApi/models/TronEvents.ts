/* tslint:disable */
/* eslint-disable */
/**
 * gasless TRON service REST api
 * Service to publish TRON transactions
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { TronEvent } from './TronEvent';
import {
    TronEventFromJSON,
    TronEventFromJSONTyped,
    TronEventToJSON,
} from './TronEvent';

/**
 * 
 * @export
 * @interface TronEvents
 */
export interface TronEvents {
    /**
     * 
     * @type {Array<TronEvent>}
     * @memberof TronEvents
     */
    events: Array<TronEvent>;
    /**
     * 
     * @type {string}
     * @memberof TronEvents
     */
    fingerprint?: string;
}

/**
 * Check if a given object implements the TronEvents interface.
 */
export function instanceOfTronEvents(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "events" in value;

    return isInstance;
}

export function TronEventsFromJSON(json: any): TronEvents {
    return TronEventsFromJSONTyped(json, false);
}

export function TronEventsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TronEvents {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'events': ((json['events'] as Array<any>).map(TronEventFromJSON)),
        'fingerprint': !exists(json, 'fingerprint') ? undefined : json['fingerprint'],
    };
}

export function TronEventsToJSON(value?: TronEvents | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'events': ((value.events as Array<any>).map(TronEventToJSON)),
        'fingerprint': value.fingerprint,
    };
}

