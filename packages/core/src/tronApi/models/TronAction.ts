/* tslint:disable */
/* eslint-disable */
/**
 * gasless TRON service REST api
 * Service to publish TRON transactions
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ContractDeployAction } from './ContractDeployAction';
import {
    ContractDeployActionFromJSON,
    ContractDeployActionFromJSONTyped,
    ContractDeployActionToJSON,
} from './ContractDeployAction';
import type { ReceiveTRC20Action } from './ReceiveTRC20Action';
import {
    ReceiveTRC20ActionFromJSON,
    ReceiveTRC20ActionFromJSONTyped,
    ReceiveTRC20ActionToJSON,
} from './ReceiveTRC20Action';
import type { SendTRC20Action } from './SendTRC20Action';
import {
    SendTRC20ActionFromJSON,
    SendTRC20ActionFromJSONTyped,
    SendTRC20ActionToJSON,
} from './SendTRC20Action';

/**
 * 
 * @export
 * @interface TronAction
 */
export interface TronAction {
    /**
     * 
     * @type {string}
     * @memberof TronAction
     */
    type: TronActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof TronAction
     */
    status: TronActionStatusEnum;
    /**
     * 
     * @type {ReceiveTRC20Action}
     * @memberof TronAction
     */
    receiveTRC20?: ReceiveTRC20Action;
    /**
     * 
     * @type {SendTRC20Action}
     * @memberof TronAction
     */
    sendTRC20?: SendTRC20Action;
    /**
     * 
     * @type {ContractDeployAction}
     * @memberof TronAction
     */
    contractDeploy?: ContractDeployAction;
}


/**
 * @export
 */
export const TronActionTypeEnum = {
    ReceiveTrc20: 'ReceiveTRC20',
    SendTrc20: 'SendTRC20',
    ContractDeploy: 'ContractDeploy'
} as const;
export type TronActionTypeEnum = typeof TronActionTypeEnum[keyof typeof TronActionTypeEnum];

/**
 * @export
 */
export const TronActionStatusEnum = {
    Ok: 'ok',
    Failed: 'failed',
    Pending: 'pending'
} as const;
export type TronActionStatusEnum = typeof TronActionStatusEnum[keyof typeof TronActionStatusEnum];


/**
 * Check if a given object implements the TronAction interface.
 */
export function instanceOfTronAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "status" in value;

    return isInstance;
}

export function TronActionFromJSON(json: any): TronAction {
    return TronActionFromJSONTyped(json, false);
}

export function TronActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): TronAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': json['type'],
        'status': json['status'],
        'receiveTRC20': !exists(json, 'receiveTRC20') ? undefined : ReceiveTRC20ActionFromJSON(json['receiveTRC20']),
        'sendTRC20': !exists(json, 'sendTRC20') ? undefined : SendTRC20ActionFromJSON(json['sendTRC20']),
        'contractDeploy': !exists(json, 'contractDeploy') ? undefined : ContractDeployActionFromJSON(json['contractDeploy']),
    };
}

export function TronActionToJSON(value?: TronAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': value.type,
        'status': value.status,
        'receiveTRC20': ReceiveTRC20ActionToJSON(value.receiveTRC20),
        'sendTRC20': SendTRC20ActionToJSON(value.sendTRC20),
        'contractDeploy': ContractDeployActionToJSON(value.contractDeploy),
    };
}

