/* tslint:disable */
/* eslint-disable */
/**
 * Custodial-Battery REST API.
 * REST API for Custodial Battery which provides gas to different networks to help execute transactions.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RechargeMethodsMethodsInner
 */
export interface RechargeMethodsMethodsInner {
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    jettonMaster?: string;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    minBootstrapValue?: string;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    type: RechargeMethodsMethodsInnerTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    rate: string;
    /**
     * 
     * @type {string}
     * @memberof RechargeMethodsMethodsInner
     */
    symbol: string;
    /**
     * 
     * @type {number}
     * @memberof RechargeMethodsMethodsInner
     */
    decimals: number;
    /**
     * 
     * @type {boolean}
     * @memberof RechargeMethodsMethodsInner
     */
    supportGasless: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof RechargeMethodsMethodsInner
     */
    supportRecharge: boolean;
}


/**
 * @export
 */
export const RechargeMethodsMethodsInnerTypeEnum = {
    Jetton: 'jetton',
    Ton: 'ton'
} as const;
export type RechargeMethodsMethodsInnerTypeEnum = typeof RechargeMethodsMethodsInnerTypeEnum[keyof typeof RechargeMethodsMethodsInnerTypeEnum];


/**
 * Check if a given object implements the RechargeMethodsMethodsInner interface.
 */
export function instanceOfRechargeMethodsMethodsInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "rate" in value;
    isInstance = isInstance && "symbol" in value;
    isInstance = isInstance && "decimals" in value;
    isInstance = isInstance && "supportGasless" in value;
    isInstance = isInstance && "supportRecharge" in value;

    return isInstance;
}

export function RechargeMethodsMethodsInnerFromJSON(json: any): RechargeMethodsMethodsInner {
    return RechargeMethodsMethodsInnerFromJSONTyped(json, false);
}

export function RechargeMethodsMethodsInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): RechargeMethodsMethodsInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'image': !exists(json, 'image') ? undefined : json['image'],
        'jettonMaster': !exists(json, 'jetton_master') ? undefined : json['jetton_master'],
        'minBootstrapValue': !exists(json, 'min_bootstrap_value') ? undefined : json['min_bootstrap_value'],
        'type': json['type'],
        'rate': json['rate'],
        'symbol': json['symbol'],
        'decimals': json['decimals'],
        'supportGasless': json['support_gasless'],
        'supportRecharge': json['support_recharge'],
    };
}

export function RechargeMethodsMethodsInnerToJSON(value?: RechargeMethodsMethodsInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'image': value.image,
        'jetton_master': value.jettonMaster,
        'min_bootstrap_value': value.minBootstrapValue,
        'type': value.type,
        'rate': value.rate,
        'symbol': value.symbol,
        'decimals': value.decimals,
        'support_gasless': value.supportGasless,
        'support_recharge': value.supportRecharge,
    };
}

