/* tslint:disable */
/* eslint-disable */
/**
 * Custodial-Battery REST API.
 * REST API for Custodial Battery which provides gas to different networks to help execute transactions.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PurchasesPurchasesInnerRefundInformation } from './PurchasesPurchasesInnerRefundInformation';
import {
    PurchasesPurchasesInnerRefundInformationFromJSON,
    PurchasesPurchasesInnerRefundInformationFromJSONTyped,
    PurchasesPurchasesInnerRefundInformationToJSON,
} from './PurchasesPurchasesInnerRefundInformation';

/**
 * 
 * @export
 * @interface PurchasesPurchasesInner
 */
export interface PurchasesPurchasesInner {
    /**
     * 
     * @type {string}
     * @memberof PurchasesPurchasesInner
     */
    promo?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasesPurchasesInner
     */
    forAccountId?: string;
    /**
     * 
     * @type {number}
     * @memberof PurchasesPurchasesInner
     * @deprecated
     */
    userPurchaseId: number;
    /**
     * 
     * @type {number}
     * @memberof PurchasesPurchasesInner
     */
    purchaseId: number;
    /**
     * 
     * @type {string}
     * @memberof PurchasesPurchasesInner
     */
    type: PurchasesPurchasesInnerTypeEnum;
    /**
     * Amount describes the amount paid by the user for this purchase when we know it. For crypto purchases it is always set.
     * @type {string}
     * @memberof PurchasesPurchasesInner
     */
    amount?: string;
    /**
     * 
     * @type {number}
     * @memberof PurchasesPurchasesInner
     */
    charges: number;
    /**
     * Currency is set when we know it. For crypto purchases it is always set.
     * @type {string}
     * @memberof PurchasesPurchasesInner
     */
    currency?: string;
    /**
     * 
     * @type {string}
     * @memberof PurchasesPurchasesInner
     */
    datetime: string;
    /**
     * 
     * @type {PurchasesPurchasesInnerRefundInformation}
     * @memberof PurchasesPurchasesInner
     */
    refundInformation?: PurchasesPurchasesInnerRefundInformation;
}


/**
 * @export
 */
export const PurchasesPurchasesInnerTypeEnum = {
    Android: 'android',
    Ios: 'ios',
    PromoCode: 'promo-code',
    Crypto: 'crypto',
    Gift: 'gift',
    OnTheWayGift: 'on-the-way-gift'
} as const;
export type PurchasesPurchasesInnerTypeEnum = typeof PurchasesPurchasesInnerTypeEnum[keyof typeof PurchasesPurchasesInnerTypeEnum];


/**
 * Check if a given object implements the PurchasesPurchasesInner interface.
 */
export function instanceOfPurchasesPurchasesInner(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "userPurchaseId" in value;
    isInstance = isInstance && "purchaseId" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "charges" in value;
    isInstance = isInstance && "datetime" in value;

    return isInstance;
}

export function PurchasesPurchasesInnerFromJSON(json: any): PurchasesPurchasesInner {
    return PurchasesPurchasesInnerFromJSONTyped(json, false);
}

export function PurchasesPurchasesInnerFromJSONTyped(json: any, ignoreDiscriminator: boolean): PurchasesPurchasesInner {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'promo': !exists(json, 'promo') ? undefined : json['promo'],
        'forAccountId': !exists(json, 'for_account_id') ? undefined : json['for_account_id'],
        'userPurchaseId': json['user_purchase_id'],
        'purchaseId': json['purchase_id'],
        'type': json['type'],
        'amount': !exists(json, 'amount') ? undefined : json['amount'],
        'charges': json['charges'],
        'currency': !exists(json, 'currency') ? undefined : json['currency'],
        'datetime': json['datetime'],
        'refundInformation': !exists(json, 'refund_information') ? undefined : PurchasesPurchasesInnerRefundInformationFromJSON(json['refund_information']),
    };
}

export function PurchasesPurchasesInnerToJSON(value?: PurchasesPurchasesInner | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'promo': value.promo,
        'for_account_id': value.forAccountId,
        'user_purchase_id': value.userPurchaseId,
        'purchase_id': value.purchaseId,
        'type': value.type,
        'amount': value.amount,
        'charges': value.charges,
        'currency': value.currency,
        'datetime': value.datetime,
        'refund_information': PurchasesPurchasesInnerRefundInformationToJSON(value.refundInformation),
    };
}

