/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { JettonVerificationType } from './JettonVerificationType';
import {
    JettonVerificationTypeFromJSON,
    JettonVerificationTypeFromJSONTyped,
    JettonVerificationTypeToJSON,
} from './JettonVerificationType';

/**
 * 
 * @export
 * @interface Jetton
 */
export interface Jetton {
    /**
     * 
     * @type {string}
     * @memberof Jetton
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof Jetton
     */
    decimals: number;
    /**
     * 
     * @type {string}
     * @memberof Jetton
     */
    image?: string;
    /**
     * 
     * @type {string}
     * @memberof Jetton
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Jetton
     */
    symbol: string;
    /**
     * 
     * @type {JettonVerificationType}
     * @memberof Jetton
     */
    verification?: JettonVerificationType;
}

/**
 * Check if a given object implements the Jetton interface.
 */
export function instanceOfJetton(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "address" in value;
    isInstance = isInstance && "decimals" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "symbol" in value;

    return isInstance;
}

export function JettonFromJSON(json: any): Jetton {
    return JettonFromJSONTyped(json, false);
}

export function JettonFromJSONTyped(json: any, ignoreDiscriminator: boolean): Jetton {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'address': json['address'],
        'decimals': json['decimals'],
        'image': !exists(json, 'image') ? undefined : json['image'],
        'name': json['name'],
        'symbol': json['symbol'],
        'verification': !exists(json, 'verification') ? undefined : JettonVerificationTypeFromJSON(json['verification']),
    };
}

export function JettonToJSON(value?: Jetton | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'address': value.address,
        'decimals': value.decimals,
        'image': value.image,
        'name': value.name,
        'symbol': value.symbol,
        'verification': JettonVerificationTypeToJSON(value.verification),
    };
}

