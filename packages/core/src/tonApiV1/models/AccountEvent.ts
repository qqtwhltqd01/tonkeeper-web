/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';
import type { Action } from './Action';
import {
    ActionFromJSON,
    ActionFromJSONTyped,
    ActionToJSON,
} from './Action';
import type { Fee } from './Fee';
import {
    FeeFromJSON,
    FeeFromJSONTyped,
    FeeToJSON,
} from './Fee';

/**
 * 
 * @export
 * @interface AccountEvent
 */
export interface AccountEvent {
    /**
     * 
     * @type {AccountAddress}
     * @memberof AccountEvent
     */
    account: AccountAddress;
    /**
     * 
     * @type {Array<Action>}
     * @memberof AccountEvent
     */
    actions: Array<Action>;
    /**
     * 
     * @type {string}
     * @memberof AccountEvent
     */
    eventId: string;
    /**
     * 
     * @type {Fee}
     * @memberof AccountEvent
     */
    fee: Fee;
    /**
     * Event is not finished yet. Transactions still happening
     * @type {boolean}
     * @memberof AccountEvent
     */
    inProgress: boolean;
    /**
     * scam
     * @type {boolean}
     * @memberof AccountEvent
     */
    isScam: boolean;
    /**
     * 
     * @type {number}
     * @memberof AccountEvent
     */
    lt: number;
    /**
     * 
     * @type {number}
     * @memberof AccountEvent
     */
    timestamp: number;
}

/**
 * Check if a given object implements the AccountEvent interface.
 */
export function instanceOfAccountEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "account" in value;
    isInstance = isInstance && "actions" in value;
    isInstance = isInstance && "eventId" in value;
    isInstance = isInstance && "fee" in value;
    isInstance = isInstance && "inProgress" in value;
    isInstance = isInstance && "isScam" in value;
    isInstance = isInstance && "lt" in value;
    isInstance = isInstance && "timestamp" in value;

    return isInstance;
}

export function AccountEventFromJSON(json: any): AccountEvent {
    return AccountEventFromJSONTyped(json, false);
}

export function AccountEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'account': AccountAddressFromJSON(json['account']),
        'actions': ((json['actions'] as Array<any>).map(ActionFromJSON)),
        'eventId': json['event_id'],
        'fee': FeeFromJSON(json['fee']),
        'inProgress': json['in_progress'],
        'isScam': json['is_scam'],
        'lt': json['lt'],
        'timestamp': json['timestamp'],
    };
}

export function AccountEventToJSON(value?: AccountEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'account': AccountAddressToJSON(value.account),
        'actions': ((value.actions as Array<any>).map(ActionToJSON)),
        'event_id': value.eventId,
        'fee': FeeToJSON(value.fee),
        'in_progress': value.inProgress,
        'is_scam': value.isScam,
        'lt': value.lt,
        'timestamp': value.timestamp,
    };
}

