/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';
import type { NftItemRepr } from './NftItemRepr';
import {
    NftItemReprFromJSON,
    NftItemReprFromJSONTyped,
    NftItemReprToJSON,
} from './NftItemRepr';
import type { Price } from './Price';
import {
    PriceFromJSON,
    PriceFromJSONTyped,
    PriceToJSON,
} from './Price';

/**
 * 
 * @export
 * @interface AuctionBidAction
 */
export interface AuctionBidAction {
    /**
     * 
     * @type {Price}
     * @memberof AuctionBidAction
     */
    amount: Price;
    /**
     * 
     * @type {string}
     * @memberof AuctionBidAction
     */
    auctionType: AuctionBidActionAuctionTypeEnum;
    /**
     * 
     * @type {AccountAddress}
     * @memberof AuctionBidAction
     */
    beneficiary: AccountAddress;
    /**
     * 
     * @type {AccountAddress}
     * @memberof AuctionBidAction
     */
    bidder: AccountAddress;
    /**
     * 
     * @type {NftItemRepr}
     * @memberof AuctionBidAction
     */
    nft?: NftItemRepr;
}


/**
 * @export
 */
export const AuctionBidActionAuctionTypeEnum = {
    DnsTon: 'DNS.ton',
    DnsTg: 'DNS.tg',
    NumberTg: 'NUMBER.tg',
    Getgems: 'getgems'
} as const;
export type AuctionBidActionAuctionTypeEnum = typeof AuctionBidActionAuctionTypeEnum[keyof typeof AuctionBidActionAuctionTypeEnum];


/**
 * Check if a given object implements the AuctionBidAction interface.
 */
export function instanceOfAuctionBidAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "auctionType" in value;
    isInstance = isInstance && "beneficiary" in value;
    isInstance = isInstance && "bidder" in value;

    return isInstance;
}

export function AuctionBidActionFromJSON(json: any): AuctionBidAction {
    return AuctionBidActionFromJSONTyped(json, false);
}

export function AuctionBidActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuctionBidAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'amount': PriceFromJSON(json['amount']),
        'auctionType': json['auction_type'],
        'beneficiary': AccountAddressFromJSON(json['beneficiary']),
        'bidder': AccountAddressFromJSON(json['bidder']),
        'nft': !exists(json, 'nft') ? undefined : NftItemReprFromJSON(json['nft']),
    };
}

export function AuctionBidActionToJSON(value?: AuctionBidAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'amount': PriceToJSON(value.amount),
        'auction_type': value.auctionType,
        'beneficiary': AccountAddressToJSON(value.beneficiary),
        'bidder': AccountAddressToJSON(value.bidder),
        'nft': NftItemReprToJSON(value.nft),
    };
}

