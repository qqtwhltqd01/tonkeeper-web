/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';
import type { Jetton } from './Jetton';
import {
    JettonFromJSON,
    JettonFromJSONTyped,
    JettonToJSON,
} from './Jetton';
import type { JettonVerificationType } from './JettonVerificationType';
import {
    JettonVerificationTypeFromJSON,
    JettonVerificationTypeFromJSONTyped,
    JettonVerificationTypeToJSON,
} from './JettonVerificationType';

/**
 * 
 * @export
 * @interface JettonBalance
 */
export interface JettonBalance {
    /**
     * 
     * @type {string}
     * @memberof JettonBalance
     */
    balance: string;
    /**
     * 
     * @type {string}
     * @memberof JettonBalance
     */
    jettonAddress: string;
    /**
     * 
     * @type {Jetton}
     * @memberof JettonBalance
     */
    metadata?: Jetton;
    /**
     * 
     * @type {JettonVerificationType}
     * @memberof JettonBalance
     */
    verification: JettonVerificationType;
    /**
     * 
     * @type {AccountAddress}
     * @memberof JettonBalance
     */
    walletAddress: AccountAddress;
}

/**
 * Check if a given object implements the JettonBalance interface.
 */
export function instanceOfJettonBalance(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "balance" in value;
    isInstance = isInstance && "jettonAddress" in value;
    isInstance = isInstance && "verification" in value;
    isInstance = isInstance && "walletAddress" in value;

    return isInstance;
}

export function JettonBalanceFromJSON(json: any): JettonBalance {
    return JettonBalanceFromJSONTyped(json, false);
}

export function JettonBalanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): JettonBalance {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'balance': json['balance'],
        'jettonAddress': json['jetton_address'],
        'metadata': !exists(json, 'metadata') ? undefined : JettonFromJSON(json['metadata']),
        'verification': JettonVerificationTypeFromJSON(json['verification']),
        'walletAddress': AccountAddressFromJSON(json['wallet_address']),
    };
}

export function JettonBalanceToJSON(value?: JettonBalance | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'balance': value.balance,
        'jetton_address': value.jettonAddress,
        'metadata': JettonToJSON(value.metadata),
        'verification': JettonVerificationTypeToJSON(value.verification),
        'wallet_address': AccountAddressToJSON(value.walletAddress),
    };
}

