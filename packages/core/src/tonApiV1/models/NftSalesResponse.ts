/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NftForSale } from './NftForSale';
import {
    NftForSaleFromJSON,
    NftForSaleFromJSONTyped,
    NftForSaleToJSON,
} from './NftForSale';

/**
 * 
 * @export
 * @interface NftSalesResponse
 */
export interface NftSalesResponse {
    /**
     * 
     * @type {Array<NftForSale>}
     * @memberof NftSalesResponse
     */
    disintar?: Array<NftForSale>;
    /**
     * 
     * @type {Array<NftForSale>}
     * @memberof NftSalesResponse
     */
    getgems?: Array<NftForSale>;
    /**
     * 
     * @type {Array<NftForSale>}
     * @memberof NftSalesResponse
     */
    other?: Array<NftForSale>;
}

/**
 * Check if a given object implements the NftSalesResponse interface.
 */
export function instanceOfNftSalesResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function NftSalesResponseFromJSON(json: any): NftSalesResponse {
    return NftSalesResponseFromJSONTyped(json, false);
}

export function NftSalesResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): NftSalesResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'disintar': !exists(json, 'disintar') ? undefined : ((json['disintar'] as Array<any>).map(NftForSaleFromJSON)),
        'getgems': !exists(json, 'getgems') ? undefined : ((json['getgems'] as Array<any>).map(NftForSaleFromJSON)),
        'other': !exists(json, 'other') ? undefined : ((json['other'] as Array<any>).map(NftForSaleFromJSON)),
    };
}

export function NftSalesResponseToJSON(value?: NftSalesResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'disintar': value.disintar === undefined ? undefined : ((value.disintar as Array<any>).map(NftForSaleToJSON)),
        'getgems': value.getgems === undefined ? undefined : ((value.getgems as Array<any>).map(NftForSaleToJSON)),
        'other': value.other === undefined ? undefined : ((value.other as Array<any>).map(NftForSaleToJSON)),
    };
}

