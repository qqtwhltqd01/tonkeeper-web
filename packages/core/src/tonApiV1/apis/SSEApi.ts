/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  JettonTransferEvent,
  NFTTransferEvent,
  NewTransactionEvent,
} from '../models/index';
import {
    JettonTransferEventFromJSON,
    JettonTransferEventToJSON,
    NFTTransferEventFromJSON,
    NFTTransferEventToJSON,
    NewTransactionEventFromJSON,
    NewTransactionEventToJSON,
} from '../models/index';

export interface GetJettonTransferEventRequest {
    jettons: string;
}

export interface GetNFTTransferEventRequest {
    nfts: string;
}

export interface GetNewTransactionEventRequest {
    accounts: GetNewTransactionEventAccountsEnum;
}

/**
 * SSEApi - interface
 * 
 * @export
 * @interface SSEApiInterface
 */
export interface SSEApiInterface {
    /**
     * Get check jetton transfer
     * @param {string} jettons jettons for check transfer (separate by comma)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSEApiInterface
     */
    getJettonTransferEventRaw(requestParameters: GetJettonTransferEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JettonTransferEvent>>;

    /**
     * Get check jetton transfer
     */
    getJettonTransferEvent(requestParameters: GetJettonTransferEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JettonTransferEvent>;

    /**
     * Get check nft transfer
     * @param {string} nfts nfts for check transfer (separate by comma)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSEApiInterface
     */
    getNFTTransferEventRaw(requestParameters: GetNFTTransferEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NFTTransferEvent>>;

    /**
     * Get check nft transfer
     */
    getNFTTransferEvent(requestParameters: GetNFTTransferEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NFTTransferEvent>;

    /**
     * Get new transactions from accounts
     * @param {'all'} accounts accounts for check new transactions (separate by comma) or use \&#39;all\&#39; for subscribe to all accounts
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSEApiInterface
     */
    getNewTransactionEventRaw(requestParameters: GetNewTransactionEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewTransactionEvent>>;

    /**
     * Get new transactions from accounts
     */
    getNewTransactionEvent(requestParameters: GetNewTransactionEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewTransactionEvent>;

    /**
     * Test new_transaction event
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SSEApiInterface
     */
    getNewTransactionTestEventRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewTransactionEvent>>;

    /**
     * Test new_transaction event
     */
    getNewTransactionTestEvent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewTransactionEvent>;

}

/**
 * 
 */
export class SSEApi extends runtime.BaseAPI implements SSEApiInterface {

    /**
     * Get check jetton transfer
     */
    async getJettonTransferEventRaw(requestParameters: GetJettonTransferEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JettonTransferEvent>> {
        if (requestParameters.jettons === null || requestParameters.jettons === undefined) {
            throw new runtime.RequiredError('jettons','Required parameter requestParameters.jettons was null or undefined when calling getJettonTransferEvent.');
        }

        const queryParameters: any = {};

        if (requestParameters.jettons !== undefined) {
            queryParameters['jettons'] = requestParameters.jettons;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/stream/sse/jetton_transfer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JettonTransferEventFromJSON(jsonValue));
    }

    /**
     * Get check jetton transfer
     */
    async getJettonTransferEvent(requestParameters: GetJettonTransferEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JettonTransferEvent> {
        const response = await this.getJettonTransferEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get check nft transfer
     */
    async getNFTTransferEventRaw(requestParameters: GetNFTTransferEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NFTTransferEvent>> {
        if (requestParameters.nfts === null || requestParameters.nfts === undefined) {
            throw new runtime.RequiredError('nfts','Required parameter requestParameters.nfts was null or undefined when calling getNFTTransferEvent.');
        }

        const queryParameters: any = {};

        if (requestParameters.nfts !== undefined) {
            queryParameters['nfts'] = requestParameters.nfts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/stream/sse/nft_transfer`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NFTTransferEventFromJSON(jsonValue));
    }

    /**
     * Get check nft transfer
     */
    async getNFTTransferEvent(requestParameters: GetNFTTransferEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NFTTransferEvent> {
        const response = await this.getNFTTransferEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get new transactions from accounts
     */
    async getNewTransactionEventRaw(requestParameters: GetNewTransactionEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewTransactionEvent>> {
        if (requestParameters.accounts === null || requestParameters.accounts === undefined) {
            throw new runtime.RequiredError('accounts','Required parameter requestParameters.accounts was null or undefined when calling getNewTransactionEvent.');
        }

        const queryParameters: any = {};

        if (requestParameters.accounts !== undefined) {
            queryParameters['accounts'] = requestParameters.accounts;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/stream/sse/account`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewTransactionEventFromJSON(jsonValue));
    }

    /**
     * Get new transactions from accounts
     */
    async getNewTransactionEvent(requestParameters: GetNewTransactionEventRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewTransactionEvent> {
        const response = await this.getNewTransactionEventRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test new_transaction event
     */
    async getNewTransactionTestEventRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NewTransactionEvent>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/stream/sse/test/event`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NewTransactionEventFromJSON(jsonValue));
    }

    /**
     * Test new_transaction event
     */
    async getNewTransactionTestEvent(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NewTransactionEvent> {
        const response = await this.getNewTransactionTestEventRaw(initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetNewTransactionEventAccountsEnum = {
    All: 'all'
} as const;
export type GetNewTransactionEventAccountsEnum = typeof GetNewTransactionEventAccountsEnum[keyof typeof GetNewTransactionEventAccountsEnum];
