/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@fslabs.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountEvent,
  SendBocRequest,
} from '../models/index';
import {
    AccountEventFromJSON,
    AccountEventToJSON,
    SendBocRequestFromJSON,
    SendBocRequestToJSON,
} from '../models/index';

export interface EstimateTxRequest {
    sendBocRequest?: SendBocRequest;
}

export interface SendBocOperationRequest {
    sendBocRequest?: SendBocRequest;
}

/**
 * SendApi - interface
 * 
 * @export
 * @interface SendApiInterface
 */
export interface SendApiInterface {
    /**
     * Estimate fees for message
     * @param {SendBocRequest} [sendBocRequest] bag-of-cells serialized to base64
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    estimateTxRaw(requestParameters: EstimateTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvent>>;

    /**
     * Estimate fees for message
     */
    estimateTx(requestParameters: EstimateTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvent>;

    /**
     * Send message to blockchain
     * @param {SendBocRequest} [sendBocRequest] bag-of-cells serialized to base64
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SendApiInterface
     */
    sendBocRaw(requestParameters: SendBocOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     * Send message to blockchain
     */
    sendBoc(requestParameters: SendBocOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

}

/**
 * 
 */
export class SendApi extends runtime.BaseAPI implements SendApiInterface {

    /**
     * Estimate fees for message
     */
    async estimateTxRaw(requestParameters: EstimateTxRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountEvent>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/send/estimateTx`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendBocRequestToJSON(requestParameters.sendBocRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountEventFromJSON(jsonValue));
    }

    /**
     * Estimate fees for message
     */
    async estimateTx(requestParameters: EstimateTxRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountEvent> {
        const response = await this.estimateTxRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Send message to blockchain
     */
    async sendBocRaw(requestParameters: SendBocOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWTAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/send/boc`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SendBocRequestToJSON(requestParameters.sendBocRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Send message to blockchain
     */
    async sendBoc(requestParameters: SendBocOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.sendBocRaw(requestParameters, initOverrides);
    }

}
