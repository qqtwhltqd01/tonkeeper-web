/* tslint:disable */
/* eslint-disable */
/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@tonaps.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ConnectRequest,
  ExistsExtensionRequest,
  Ok,
  Payload,
  PingReadyGet500Response,
  Url,
} from '../models/index';
import {
    ConnectRequestFromJSON,
    ConnectRequestToJSON,
    ExistsExtensionRequestFromJSON,
    ExistsExtensionRequestToJSON,
    OkFromJSON,
    OkToJSON,
    PayloadFromJSON,
    PayloadToJSON,
    PingReadyGet500ResponseFromJSON,
    PingReadyGet500ResponseToJSON,
    UrlFromJSON,
    UrlToJSON,
} from '../models/index';

export interface ConnectOperationRequest {
    connectRequest?: ConnectRequest;
}

export interface DisconnectRequest {
    connectRequest?: ConnectRequest;
}

export interface ExistsExtensionOperationRequest {
    existsExtensionRequest?: ExistsExtensionRequest;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Receive a deep link for the Telegram bot
     * @param {ConnectRequest} [connectRequest] Data that is expected
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    connectRaw(requestParameters: ConnectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Url>>;

    /**
     * Receive a deep link for the Telegram bot
     */
    connect(requestParameters: ConnectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Url>;

    /**
     * 
     * @summary Disable 2FA for the wallet
     * @param {ConnectRequest} [connectRequest] Data that is expected
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    disconnectRaw(requestParameters: DisconnectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ok>>;

    /**
     * Disable 2FA for the wallet
     */
    disconnect(requestParameters: DisconnectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ok>;

    /**
     * 
     * @summary Verify if a wallet is linked to a Telegram bot
     * @param {ExistsExtensionRequest} [existsExtensionRequest] Data that is expected
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    existsExtensionRaw(requestParameters: ExistsExtensionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ok>>;

    /**
     * Verify if a wallet is linked to a Telegram bot
     */
    existsExtension(requestParameters: ExistsExtensionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ok>;

    /**
     * 
     * @summary Retrieve the payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    getPayloadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payload>>;

    /**
     * Retrieve the payload
     */
    getPayload(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payload>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Receive a deep link for the Telegram bot
     */
    async connectRaw(requestParameters: ConnectOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Url>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/connect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectRequestToJSON(requestParameters['connectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UrlFromJSON(jsonValue));
    }

    /**
     * Receive a deep link for the Telegram bot
     */
    async connect(requestParameters: ConnectOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Url> {
        const response = await this.connectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Disable 2FA for the wallet
     */
    async disconnectRaw(requestParameters: DisconnectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ok>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/disconnect`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConnectRequestToJSON(requestParameters['connectRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkFromJSON(jsonValue));
    }

    /**
     * Disable 2FA for the wallet
     */
    async disconnect(requestParameters: DisconnectRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ok> {
        const response = await this.disconnectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Verify if a wallet is linked to a Telegram bot
     */
    async existsExtensionRaw(requestParameters: ExistsExtensionOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Ok>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/exists`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExistsExtensionRequestToJSON(requestParameters['existsExtensionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OkFromJSON(jsonValue));
    }

    /**
     * Verify if a wallet is linked to a Telegram bot
     */
    async existsExtension(requestParameters: ExistsExtensionOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Ok> {
        const response = await this.existsExtensionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the payload
     */
    async getPayloadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payload>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/payload`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayloadFromJSON(jsonValue));
    }

    /**
     * Retrieve the payload
     */
    async getPayload(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payload> {
        const response = await this.getPayloadRaw(initOverrides);
        return await response.value();
    }

}
