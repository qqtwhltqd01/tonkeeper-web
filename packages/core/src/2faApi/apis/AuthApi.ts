/* tslint:disable */
/* eslint-disable */
/**
 * REST API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@tonaps.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthRequest,
  Payload,
  PingReadyGet500Response,
  Url,
} from '../models/index';
import {
    AuthRequestFromJSON,
    AuthRequestToJSON,
    PayloadFromJSON,
    PayloadToJSON,
    PingReadyGet500ResponseFromJSON,
    PingReadyGet500ResponseToJSON,
    UrlFromJSON,
    UrlToJSON,
} from '../models/index';

export interface AuthOperationRequest {
    authRequest?: AuthRequest;
}

/**
 * AuthApi - interface
 * 
 * @export
 * @interface AuthApiInterface
 */
export interface AuthApiInterface {
    /**
     * 
     * @summary Receive a deep link for the Telegram bot
     * @param {AuthRequest} [authRequest] Data that is expected
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    authRaw(requestParameters: AuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Url>>;

    /**
     * Receive a deep link for the Telegram bot
     */
    auth(requestParameters: AuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Url>;

    /**
     * 
     * @summary Retrieve the authentication payload
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApiInterface
     */
    getAuthPayloadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payload>>;

    /**
     * Retrieve the authentication payload
     */
    getAuthPayload(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payload>;

}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI implements AuthApiInterface {

    /**
     * Receive a deep link for the Telegram bot
     */
    async authRaw(requestParameters: AuthOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Url>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRequestToJSON(requestParameters['authRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UrlFromJSON(jsonValue));
    }

    /**
     * Receive a deep link for the Telegram bot
     */
    async auth(requestParameters: AuthOperationRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Url> {
        const response = await this.authRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the authentication payload
     */
    async getAuthPayloadRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Payload>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/auth/payload`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PayloadFromJSON(jsonValue));
    }

    /**
     * Retrieve the authentication payload
     */
    async getAuthPayload(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Payload> {
        const response = await this.getAuthPayloadRaw(initOverrides);
        return await response.value();
    }

}
