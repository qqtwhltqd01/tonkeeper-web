/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockRaw } from './BlockRaw';
import {
    BlockRawFromJSON,
    BlockRawFromJSONTyped,
    BlockRawToJSON,
} from './BlockRaw';
import type { GetRawListBlockTransactions200ResponseIdsInner } from './GetRawListBlockTransactions200ResponseIdsInner';
import {
    GetRawListBlockTransactions200ResponseIdsInnerFromJSON,
    GetRawListBlockTransactions200ResponseIdsInnerFromJSONTyped,
    GetRawListBlockTransactions200ResponseIdsInnerToJSON,
} from './GetRawListBlockTransactions200ResponseIdsInner';

/**
 * 
 * @export
 * @interface GetRawListBlockTransactions200Response
 */
export interface GetRawListBlockTransactions200Response {
    /**
     * 
     * @type {BlockRaw}
     * @memberof GetRawListBlockTransactions200Response
     */
    id: BlockRaw;
    /**
     * 
     * @type {number}
     * @memberof GetRawListBlockTransactions200Response
     */
    reqCount: number;
    /**
     * 
     * @type {boolean}
     * @memberof GetRawListBlockTransactions200Response
     */
    incomplete: boolean;
    /**
     * 
     * @type {Array<GetRawListBlockTransactions200ResponseIdsInner>}
     * @memberof GetRawListBlockTransactions200Response
     */
    ids: Array<GetRawListBlockTransactions200ResponseIdsInner>;
    /**
     * 
     * @type {string}
     * @memberof GetRawListBlockTransactions200Response
     */
    proof: string;
}

/**
 * Check if a given object implements the GetRawListBlockTransactions200Response interface.
 */
export function instanceOfGetRawListBlockTransactions200Response(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "reqCount" in value;
    isInstance = isInstance && "incomplete" in value;
    isInstance = isInstance && "ids" in value;
    isInstance = isInstance && "proof" in value;

    return isInstance;
}

export function GetRawListBlockTransactions200ResponseFromJSON(json: any): GetRawListBlockTransactions200Response {
    return GetRawListBlockTransactions200ResponseFromJSONTyped(json, false);
}

export function GetRawListBlockTransactions200ResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetRawListBlockTransactions200Response {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': BlockRawFromJSON(json['id']),
        'reqCount': json['req_count'],
        'incomplete': json['incomplete'],
        'ids': ((json['ids'] as Array<any>).map(GetRawListBlockTransactions200ResponseIdsInnerFromJSON)),
        'proof': json['proof'],
    };
}

export function GetRawListBlockTransactions200ResponseToJSON(value?: GetRawListBlockTransactions200Response | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': BlockRawToJSON(value.id),
        'req_count': value.reqCount,
        'incomplete': value.incomplete,
        'ids': ((value.ids as Array<any>).map(GetRawListBlockTransactions200ResponseIdsInnerToJSON)),
        'proof': value.proof,
    };
}

