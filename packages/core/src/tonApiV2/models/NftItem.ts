/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';
import type { ImagePreview } from './ImagePreview';
import {
    ImagePreviewFromJSON,
    ImagePreviewFromJSONTyped,
    ImagePreviewToJSON,
} from './ImagePreview';
import type { NftItemCollection } from './NftItemCollection';
import {
    NftItemCollectionFromJSON,
    NftItemCollectionFromJSONTyped,
    NftItemCollectionToJSON,
} from './NftItemCollection';
import type { Sale } from './Sale';
import {
    SaleFromJSON,
    SaleFromJSONTyped,
    SaleToJSON,
} from './Sale';

/**
 * 
 * @export
 * @interface NftItem
 */
export interface NftItem {
    /**
     * 
     * @type {string}
     * @memberof NftItem
     */
    address: string;
    /**
     * 
     * @type {number}
     * @memberof NftItem
     */
    index: number;
    /**
     * 
     * @type {AccountAddress}
     * @memberof NftItem
     */
    owner?: AccountAddress;
    /**
     * 
     * @type {NftItemCollection}
     * @memberof NftItem
     */
    collection?: NftItemCollection;
    /**
     * 
     * @type {boolean}
     * @memberof NftItem
     */
    verified: boolean;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof NftItem
     */
    metadata: { [key: string]: any; };
    /**
     * 
     * @type {Sale}
     * @memberof NftItem
     */
    sale?: Sale;
    /**
     * 
     * @type {Array<ImagePreview>}
     * @memberof NftItem
     */
    previews?: Array<ImagePreview>;
    /**
     * 
     * @type {string}
     * @memberof NftItem
     */
    dns?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof NftItem
     */
    approvedBy: Array<NftItemApprovedByEnum>;
}


/**
 * @export
 */
export const NftItemApprovedByEnum = {
    Getgems: 'getgems',
    Tonkeeper: 'tonkeeper',
    TonDiamonds: 'ton.diamonds'
} as const;
export type NftItemApprovedByEnum = typeof NftItemApprovedByEnum[keyof typeof NftItemApprovedByEnum];


/**
 * Check if a given object implements the NftItem interface.
 */
export function instanceOfNftItem(value: object): boolean {
    if (!('address' in value)) return false;
    if (!('index' in value)) return false;
    if (!('verified' in value)) return false;
    if (!('metadata' in value)) return false;
    if (!('approvedBy' in value)) return false;
    return true;
}

export function NftItemFromJSON(json: any): NftItem {
    return NftItemFromJSONTyped(json, false);
}

export function NftItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): NftItem {
    if (json == null) {
        return json;
    }
    return {
        
        'address': json['address'],
        'index': json['index'],
        'owner': json['owner'] == null ? undefined : AccountAddressFromJSON(json['owner']),
        'collection': json['collection'] == null ? undefined : NftItemCollectionFromJSON(json['collection']),
        'verified': json['verified'],
        'metadata': json['metadata'],
        'sale': json['sale'] == null ? undefined : SaleFromJSON(json['sale']),
        'previews': json['previews'] == null ? undefined : ((json['previews'] as Array<any>).map(ImagePreviewFromJSON)),
        'dns': json['dns'] == null ? undefined : json['dns'],
        'approvedBy': json['approved_by'],
    };
}

export function NftItemToJSON(value?: NftItem | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'address': value['address'],
        'index': value['index'],
        'owner': AccountAddressToJSON(value['owner']),
        'collection': NftItemCollectionToJSON(value['collection']),
        'verified': value['verified'],
        'metadata': value['metadata'],
        'sale': SaleToJSON(value['sale']),
        'previews': value['previews'] == null ? undefined : ((value['previews'] as Array<any>).map(ImagePreviewToJSON)),
        'dns': value['dns'],
        'approved_by': value['approvedBy'],
    };
}

