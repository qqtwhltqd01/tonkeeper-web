/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BlockCurrencyCollection } from './BlockCurrencyCollection';
import {
    BlockCurrencyCollectionFromJSON,
    BlockCurrencyCollectionFromJSONTyped,
    BlockCurrencyCollectionToJSON,
} from './BlockCurrencyCollection';

/**
 * 
 * @export
 * @interface BlockValueFlow
 */
export interface BlockValueFlow {
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    fromPrevBlk: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    toNextBlk: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    imported: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    exported: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    feesCollected: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    burned?: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    feesImported: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    recovered: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    created: BlockCurrencyCollection;
    /**
     * 
     * @type {BlockCurrencyCollection}
     * @memberof BlockValueFlow
     */
    minted: BlockCurrencyCollection;
}

/**
 * Check if a given object implements the BlockValueFlow interface.
 */
export function instanceOfBlockValueFlow(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "fromPrevBlk" in value;
    isInstance = isInstance && "toNextBlk" in value;
    isInstance = isInstance && "imported" in value;
    isInstance = isInstance && "exported" in value;
    isInstance = isInstance && "feesCollected" in value;
    isInstance = isInstance && "feesImported" in value;
    isInstance = isInstance && "recovered" in value;
    isInstance = isInstance && "created" in value;
    isInstance = isInstance && "minted" in value;

    return isInstance;
}

export function BlockValueFlowFromJSON(json: any): BlockValueFlow {
    return BlockValueFlowFromJSONTyped(json, false);
}

export function BlockValueFlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): BlockValueFlow {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fromPrevBlk': BlockCurrencyCollectionFromJSON(json['from_prev_blk']),
        'toNextBlk': BlockCurrencyCollectionFromJSON(json['to_next_blk']),
        'imported': BlockCurrencyCollectionFromJSON(json['imported']),
        'exported': BlockCurrencyCollectionFromJSON(json['exported']),
        'feesCollected': BlockCurrencyCollectionFromJSON(json['fees_collected']),
        'burned': !exists(json, 'burned') ? undefined : BlockCurrencyCollectionFromJSON(json['burned']),
        'feesImported': BlockCurrencyCollectionFromJSON(json['fees_imported']),
        'recovered': BlockCurrencyCollectionFromJSON(json['recovered']),
        'created': BlockCurrencyCollectionFromJSON(json['created']),
        'minted': BlockCurrencyCollectionFromJSON(json['minted']),
    };
}

export function BlockValueFlowToJSON(value?: BlockValueFlow | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'from_prev_blk': BlockCurrencyCollectionToJSON(value.fromPrevBlk),
        'to_next_blk': BlockCurrencyCollectionToJSON(value.toNextBlk),
        'imported': BlockCurrencyCollectionToJSON(value.imported),
        'exported': BlockCurrencyCollectionToJSON(value.exported),
        'fees_collected': BlockCurrencyCollectionToJSON(value.feesCollected),
        'burned': BlockCurrencyCollectionToJSON(value.burned),
        'fees_imported': BlockCurrencyCollectionToJSON(value.feesImported),
        'recovered': BlockCurrencyCollectionToJSON(value.recovered),
        'created': BlockCurrencyCollectionToJSON(value.created),
        'minted': BlockCurrencyCollectionToJSON(value.minted),
    };
}

