/* tslint:disable */
/* eslint-disable */
/**
 * REST api to TON blockchain explorer
 * Provide access to indexed TON blockchain
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccountAddress } from './AccountAddress';
import {
    AccountAddressFromJSON,
    AccountAddressFromJSONTyped,
    AccountAddressToJSON,
} from './AccountAddress';

/**
 * 
 * @export
 * @interface InscriptionMintAction
 */
export interface InscriptionMintAction {
    /**
     * 
     * @type {AccountAddress}
     * @memberof InscriptionMintAction
     */
    recipient: AccountAddress;
    /**
     * amount in minimal particles
     * @type {string}
     * @memberof InscriptionMintAction
     */
    amount: string;
    /**
     * 
     * @type {string}
     * @memberof InscriptionMintAction
     */
    type: InscriptionMintActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof InscriptionMintAction
     */
    ticker: string;
    /**
     * 
     * @type {number}
     * @memberof InscriptionMintAction
     */
    decimals: number;
}


/**
 * @export
 */
export const InscriptionMintActionTypeEnum = {
    Ton20: 'ton20',
    Gram20: 'gram20'
} as const;
export type InscriptionMintActionTypeEnum = typeof InscriptionMintActionTypeEnum[keyof typeof InscriptionMintActionTypeEnum];


/**
 * Check if a given object implements the InscriptionMintAction interface.
 */
export function instanceOfInscriptionMintAction(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "recipient" in value;
    isInstance = isInstance && "amount" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "ticker" in value;
    isInstance = isInstance && "decimals" in value;

    return isInstance;
}

export function InscriptionMintActionFromJSON(json: any): InscriptionMintAction {
    return InscriptionMintActionFromJSONTyped(json, false);
}

export function InscriptionMintActionFromJSONTyped(json: any, ignoreDiscriminator: boolean): InscriptionMintAction {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'recipient': AccountAddressFromJSON(json['recipient']),
        'amount': json['amount'],
        'type': json['type'],
        'ticker': json['ticker'],
        'decimals': json['decimals'],
    };
}

export function InscriptionMintActionToJSON(value?: InscriptionMintAction | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'recipient': AccountAddressToJSON(value.recipient),
        'amount': value.amount,
        'type': value.type,
        'ticker': value.ticker,
        'decimals': value.decimals,
    };
}

