import { BrowserWindow, app, ipcMain, shell } from 'electron';
import isDev from 'electron-is-dev';
import log from 'electron-log/main';
import path from 'path';
import { updateElectronApp } from 'update-electron-app';
import { handleBackgroundMessage } from './electron/background';
import { TonConnectSSE } from './electron/sseEvetns';
import { Message } from './libs/message';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Optional, initialize the logger for any renderer process
log.initialize({ preload: true });
log.info('Application start-up');

let mainWindow: BrowserWindow | undefined = undefined;

if (process.defaultApp) {
    if (process.argv.length >= 2) {
        app.setAsDefaultProtocolClient('tc', process.execPath, [path.resolve(process.argv[1])]);
        app.setAsDefaultProtocolClient('tonkeeper-tc', process.execPath, [
            path.resolve(process.argv[1])
        ]);
    }
} else {
    app.setAsDefaultProtocolClient('tc');
    app.setAsDefaultProtocolClient('tonkeeper-tc');
}

const gotTheLock = app.requestSingleInstanceLock();

if (!gotTheLock) {
    app.quit();
} else {
    app.on('second-instance', (event, commandLine, workingDirectory) => {
        // Someone tried to run a second instance, we should focus our window.
        if (mainWindow) {
            if (mainWindow.isMinimized()) mainWindow.restore();
            mainWindow.focus();
        }

        mainWindow.webContents.send('tc', commandLine.pop().slice(0, -1));
        //   dialog.showErrorBox('Welcome Back', `You arrived from: ${commandLine.pop().slice(0, -1)}`);
    });

    // Create mainWindow, load the rest of the app, etc...
    app.whenReady().then(() => {
        createWindow();
    });

    app.on('open-url', (event, url) => {
        mainWindow.webContents.send('tc', url);
        // dialog.showErrorBox('Welcome Back', `You arrived from: ${url}`);
    });
}

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
    app.quit();
}

const createWindow = (): void => {
    // Create the browser window.
    mainWindow = new BrowserWindow({
        icon: path.join(process.cwd(), 'public', 'icon.icns'),
        width: isDev ? 1100 : 450,
        height: 700,
        webPreferences: {
            zoomFactor: 0.8,
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY
        }
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    if (isDev) {
        // Open the DevTools.
        mainWindow.webContents.openDevTools();
    }

    const tonConnect = TonConnectSSE.getInstance(mainWindow);

    mainWindow.on('closed', () => {
        ipcMain.removeHandler('message');
        tonConnect.destroy();
    });

    ipcMain.handle('message', async (event, message: Message) => {
        try {
            return await handleBackgroundMessage(message, tonConnect);
        } catch (e) {
            return e;
        }
    });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
// app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') {
        app.quit();
    }
});

app.on('activate', () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

updateElectronApp({ logger: log });

// Handle window controls via IPC
ipcMain.on('shell:open', () => {
    const pageDirectory = __dirname.replace('app.asar', 'app.asar.unpacked');
    const pagePath = path.join('file://', pageDirectory, 'index.html');
    shell.openExternal(pagePath);
});
