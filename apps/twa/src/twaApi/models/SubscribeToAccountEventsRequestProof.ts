/* tslint:disable */
/* eslint-disable */
/**
 * Tonkeeper TWA API.
 * REST API for Tonkeeper TWA.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@tonkeeper.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SubscribeToAccountEventsRequestProofDomain } from './SubscribeToAccountEventsRequestProofDomain';
import {
    SubscribeToAccountEventsRequestProofDomainFromJSON,
    SubscribeToAccountEventsRequestProofDomainFromJSONTyped,
    SubscribeToAccountEventsRequestProofDomainToJSON,
} from './SubscribeToAccountEventsRequestProofDomain';

/**
 * TON Connect proof of ownership of the address
 * @export
 * @interface SubscribeToAccountEventsRequestProof
 */
export interface SubscribeToAccountEventsRequestProof {
    /**
     * 
     * @type {number}
     * @memberof SubscribeToAccountEventsRequestProof
     */
    timestamp: number;
    /**
     * 
     * @type {SubscribeToAccountEventsRequestProofDomain}
     * @memberof SubscribeToAccountEventsRequestProof
     */
    domain: SubscribeToAccountEventsRequestProofDomain;
    /**
     * 
     * @type {string}
     * @memberof SubscribeToAccountEventsRequestProof
     */
    signature: string;
    /**
     * 
     * @type {string}
     * @memberof SubscribeToAccountEventsRequestProof
     */
    payload: string;
    /**
     * 
     * @type {string}
     * @memberof SubscribeToAccountEventsRequestProof
     */
    stateInit?: string;
}

/**
 * Check if a given object implements the SubscribeToAccountEventsRequestProof interface.
 */
export function instanceOfSubscribeToAccountEventsRequestProof(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "timestamp" in value;
    isInstance = isInstance && "domain" in value;
    isInstance = isInstance && "signature" in value;
    isInstance = isInstance && "payload" in value;

    return isInstance;
}

export function SubscribeToAccountEventsRequestProofFromJSON(json: any): SubscribeToAccountEventsRequestProof {
    return SubscribeToAccountEventsRequestProofFromJSONTyped(json, false);
}

export function SubscribeToAccountEventsRequestProofFromJSONTyped(json: any, ignoreDiscriminator: boolean): SubscribeToAccountEventsRequestProof {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'timestamp': json['timestamp'],
        'domain': SubscribeToAccountEventsRequestProofDomainFromJSON(json['domain']),
        'signature': json['signature'],
        'payload': json['payload'],
        'stateInit': !exists(json, 'state_init') ? undefined : json['state_init'],
    };
}

export function SubscribeToAccountEventsRequestProofToJSON(value?: SubscribeToAccountEventsRequestProof | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'timestamp': value.timestamp,
        'domain': SubscribeToAccountEventsRequestProofDomainToJSON(value.domain),
        'signature': value.signature,
        'payload': value.payload,
        'state_init': value.stateInit,
    };
}

